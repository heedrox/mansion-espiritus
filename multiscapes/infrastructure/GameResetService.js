const DatabaseConfig = require('./DatabaseConfig');
const admin = require('firebase-admin');

class GameResetService {
    constructor() {
        this.db = DatabaseConfig.getDb();
    }

    async resetGame(code) {
        try {
            console.log(`üîÑ Iniciando reset del juego para c√≥digo: ${code}`);
            
            // 1. Eliminar el documento completo y todas sus subcolecciones
            await this._deleteDocumentAndSubcollections(code);
            
            // 2. Crear nuevo documento con estado inicial
            await this._createInitialDocument(code);
            
            // 3. Agregar mensaje de introducci√≥n
            await this._addIntroductionMessage(code);
            
            console.log(`‚úÖ Reset completado para c√≥digo: ${code}`);
            return {
                success: true,
                message: `Juego reseteado exitosamente para c√≥digo: ${code}`,
                code: code
            };
            
        } catch (error) {
            console.error(`‚ùå Error durante el reset del juego ${code}:`, error);
            throw error;
        }
    }

    async _deleteDocumentAndSubcollections(code) {
        try {
            const docRef = this.db.collection('twin-islands').doc(code);
            
            // Obtener todas las subcolecciones
            const collections = await docRef.listCollections();
            
            // Eliminar cada subcolecci√≥n
            for (const collection of collections) {
                console.log(`üóëÔ∏è Eliminando subcolecci√≥n: ${collection.id}`);
                const snapshot = await collection.get();
                const batch = this.db.batch();
                
                snapshot.docs.forEach(doc => {
                    batch.delete(doc.ref);
                });
                
                await batch.commit();
            }
            
            // Eliminar el documento principal
            await docRef.delete();
            console.log(`üóëÔ∏è Documento principal eliminado para c√≥digo: ${code}`);
            
        } catch (error) {
            console.error(`Error al eliminar documento y subcolecciones para ${code}:`, error);
            // Si el documento no existe, no es un error
            if (error.code !== 'NOT_FOUND') {
                throw error;
            }
        }
    }

    async _createInitialDocument(code) {
        try {
            const docRef = this.db.collection('twin-islands').doc(code);
            
            const initialData = {
                barreraElectromagneticaAbierta: false,
                start: "1",
                createdAt: new Date().toISOString(),
                resetAt: new Date().toISOString(),
                currentRoom: "playa-sur"
            };
            
            await docRef.set(initialData);
            console.log(`üìÑ Documento inicial creado para c√≥digo: ${code}`);
            
        } catch (error) {
            console.error(`Error al crear documento inicial para ${code}:`, error);
            throw error;
        }
    }

    async _addIntroductionMessage(code) {
        try {
            const messagesRef = this.db.collection('twin-islands').doc(code).collection('messages');
            
            const introductionMessage = {
                message: `¬°Bip-bip! Aqu√≠ Dron Johnson ya aterrizado, en misi√≥n por las Islas Gemelas. üåä‚ú®  
                
Estoy en la Playa Sur: acantilados, faro azul, barrera misteriosa y un teclado medio enterrado. Puedo explorar y sacar fotos de lo que me indiques üì∏.  

La radiaci√≥n impide que vengas, as√≠ que dame instrucciones y yo har√© el trabajo. Tambi√©n te advierto que la radiaci√≥n puede influir en los sistemas de comunicaci√≥n, as√≠ que aseguraos de hablar mucho entre quienes est√©is por all√≠.

¬øCon ganas de descubrir los secretos de estas islas? ü§ñ`,
                user: "drone",
                timestamp: new Date().toISOString(),
                isIntroduction: true
            };
            
            await messagesRef.add(introductionMessage);
            console.log(`üí¨ Mensaje de introducci√≥n agregado para c√≥digo: ${code}`);
            
        } catch (error) {
            console.error(`Error al agregar mensaje de introducci√≥n para ${code}:`, error);
            throw error;
        }
    }
}

module.exports = GameResetService;
