const { generateText, tool, Output } = require('ai');
const { createOpenAI } = require('@ai-sdk/openai');
const { z } = require('zod');
const DroneResponse = require('./DroneResponse');
const GameStateService = require('../infrastructure/GameStateService');
const CheckCodes = require('./checkCodes');
const MoveTo = require('./moveTo');
const fs = require('fs');
const path = require('path');

class DroneResponseGenerator {
    static async generateResponse(messages, code) {
        if (!messages || !Array.isArray(messages)) {
            throw new Error('Messages debe ser un array');
        }

        // Obtener el estado actual del juego
        const gameStateService = new GameStateService(code);
        const gameState = await gameStateService.getGameState();

        // Convertir mensajes al formato esperado por la AI SDK
        const aiMessages = messages.map(({ user, message }) => ({
            role: user === 'player' ? 'user' : 'assistant',
            content: message
        }));

        // Crear el modelo de OpenAI
        const openAiModel = createOpenAI({
            apiKey: process.env.OPEN_AI_KEY
        });

        // Definir el prompt del sistema dependiente de la ubicaci√≥n y concatenar instrucciones comunes
        const roomName = gameState.currentRoom || 'playa-sur';
        const johnsonPrompt = this._getRoomPrompt(roomName, gameState);
        const commonInstructions = this._getCommonInstructions();
        const gameStateJsonBlock = this._getGameStateJsonBlock(gameState);
        const systemPrompt = johnsonPrompt + commonInstructions + gameStateJsonBlock;

        
        try {
            const response = await generateText({
                model: openAiModel("gpt-4o-mini"),
                messages: [
                    { role: 'system', content: systemPrompt },
                    ...aiMessages
                ],
                temperature: 0.7,
                max_tokens: 2000,
                experimental_output: Output.object({
                    schema: z.object({
                        message: z.string().describe('La respuesta del drone al usuario'),
                        photoUrls: z.array(z.string().url()).optional().describe('Array de URLs de fotos que el drone puede incluir en su respuesta')
                    })
                }),
                maxSteps: 3,
                tools: [
                    tool({
                        name: 'checkCodes',
                        description: 'Verifica si un c√≥digo es v√°lido y retorna sus efectos',
                        parameters: z.object({
                            code: z.string().describe('El c√≥digo a verificar'),
                            reason: z.string().describe('Por qu√© necesitas verificar este c√≥digo')
                        }),
                        execute: async ({ code: inputCode, reason }) => {
                            console.log(`üîç ¬°¬°¬°TOOL CHECKCODE INVOCADA!!! - C√≥digo: ${inputCode} - Raz√≥n: ${reason}`);
                            const result = CheckCodes.checkCode(inputCode);
                            console.log(`üìã Resultado: ${result.isValid ? 'V√°lido' : 'Inv√°lido'} - ${result.message}`);
                            console.log(`üìä StateChanges:`, result.stateChanges);
                            
                            // Aplicar cambios de estado si el c√≥digo es v√°lido
                            if (result.isValid && result.stateChanges) {
                                console.log(`üîÑ Aplicando cambios de estado...`);
                                const GameStateService = require('../infrastructure/GameStateService');
                                const gameStateService = new GameStateService(code);
                                
                                await gameStateService.applyStateChanges(result.stateChanges);
                            }
                            
                            return result;
                        }
                    }),
                    tool({
                        name: 'moveTo',
                        description: 'Mueve el dron a una ubicaci√≥n espec√≠fica si est√° disponible',
                        parameters: z.object({
                            destination: z.string().describe('El destino al que quieres mover el dron (ej: playa-norte, playa-sur)'),
                            reason: z.string().describe('Por qu√© necesitas mover el dron a este destino')
                        }),
                        execute: async ({ destination, reason }) => {
                            console.log(`üöÄ ¬°¬°¬°TOOL MOVETO INVOCADA!!! - Destino: ${destination} - Raz√≥n: ${reason}`);
                            const result = await MoveTo.moveTo(destination, code);
                            console.log(`üìã Resultado: ${result.success ? '√âxito' : 'Fallo'} - ${result.message}`);
                            
                            return result;
                        }
                    })
                ]
            });
            
            // console.log('ü§ñ RESPUESTA DE AI RECIBIDA:', JSON.stringify(response, null, 2));
            
            // Extraer el mensaje y las URLs de fotos del resultado experimental
            let finalMessage = response.experimental_output?.message;
            let photoUrls = response.experimental_output?.photoUrls || [];
            
            // Con maxSteps: 3, el modelo deber√≠a completar la tarea en un solo paso
            // y devolver el resultado directamente en experimental_output
            
            return DroneResponse.create(finalMessage, photoUrls);
        } catch (error) {
            console.error('Error al generar respuesta con AI:', error);
            return DroneResponse.create(`Hubo un error procesando tu mensaje, no te entend√≠ bien. Int√©ntalo nuevamente.`);
        }
    }

    static _getJohnsonPrompt() {
        // Compatibilidad hacia atr√°s: usar playa-sur por defecto
        return this._getRoomPrompt('playa-sur');
    }

    static _formatRoomLabel(roomName) {
        try {
            return (roomName || '')
                .replace(/[-_]/g, ' ')
                .replace(/\b\w/g, c => c.toUpperCase());
        } catch {
            return roomName;
        }
    }

    static _getRoomPrompt(roomName = 'playa-sur', gameState = {}) {
        try {
            const gamesDataDir = path.resolve(__dirname, '../../multiscapes/games-data');
            const jsFilePath = path.join(gamesDataDir, `${roomName}.js`);
            const data = require(jsFilePath);
            

            const basePrompt = (data.prompt || '').trim();
            const locationLabel = data.locationLabel || this._formatRoomLabel(roomName);
            const mediaSection = this._composeMediaSectionFromJson(Array.isArray(data.media) ? data.media : [], locationLabel);
            const guidelines = this._getMediaGuidelines();
            
            // A√±adir informaci√≥n de destinos disponibles si existe
            const destinationsSection = this._composeDestinationsSection(data, gameState);

            return `${basePrompt}\n\n${mediaSection}\n\n${destinationsSection}\n\n${guidelines}`;
        } catch (error) {
            console.warn(`‚ö†Ô∏è No se pudo cargar el prompt para room "${roomName}" desde archivo de datos. Usando prompt por defecto. Detalle:`, error.message);
            return "" // this._getDefaultPlayaSurPromptHardcoded();
        }
    }

    static _composeMediaSectionFromJson(mediaItems, locationLabel = 'la zona') {
        let output = `# ARCHIVOS DISPONIBLES EN TU ZONA:\nEl dron ha capturado las siguientes im√°genes y v√≠deos desde ${locationLabel}.\nNO puedes enviar fotos de otros objetos. Si el operador te lo pide, indica que no ves relevancia a ese objeto.\nEst√°n disponibles para mostrar al operador durante la exploraci√≥n:`;

        mediaItems.forEach((item, index) => {
            const number = index + 1;
            const isPhoto = (item.type || '').toLowerCase() === 'photo';
            const isVideo = (item.type || '').toLowerCase() === 'video';
            const icon = isPhoto ? 'üì∑' : (isVideo ? 'üé•' : 'üì¶');
            const kindLabel = isPhoto ? 'Foto' : (isVideo ? 'V√≠deo' : 'Item');
            const title = item.title || 'Sin t√≠tulo';
            const url = item.url || '';
            const descriptionLines = Array.isArray(item.description) ? item.description : [];

            output += `\n\n${icon} ${kindLabel} ${number}: ${title} - ${url}`;
            if (descriptionLines.length > 0) {
                descriptionLines.forEach(line => {
                    output += `\n- ${line}`;
                });
            }
            output += `\n\n---`;
        });

        // Remove trailing separator if any media exists
        if (mediaItems.length > 0) {
            output = output.replace(/\n\n---$/, '');
        }

        return output;
    }

    static _composeDestinationsSection(data, gameState) {
        if (!data.availableDestinations || typeof data.availableDestinations.getDestinations !== 'function') {
            return '';
        }

        const destinations = data.availableDestinations.getDestinations(gameState);
        const description = data.availableDestinations.description || '';

        if (destinations.length === 0) {
            return `# DESTINOS DISPONIBLES:
Actualmente no puedes ir a ning√∫n lado desde esta ubicaci√≥n. ${description}`;
        }

        const destinationsList = destinations.map(dest => `- ${dest}`).join('\n');
        return `# DESTINOS DISPONIBLES:
Puedes ir a los siguientes lugares:
${destinationsList}

${description}`;
    }

    static _getMediaGuidelines() {
        return `IMPORTANTE: Solo incluye la URL en photoUrls cuando el usuario explore espec√≠ficamente ese objeto. NUNCA incluyas URLs en el texto del mensaje. El texto debe ser solo tu respuesta verbal.

EJEMPLO: Si exploras, por ejemplo, un √°rbol, tu respuesta debe ser:
- message: "¬°He encontrado un √°rbol con un s√≠mbolo misterioso! Es fascinante. Aqu√≠ tienes la foto que acabo de tomar."
- photoUrls: ["https://miniscapes.web.app/photos/twin-islands/simbolo-arbol.jpg"]

RECUERDA: NUNCA escribas URLs en el campo message. Las URLs van SOLO en photoUrls.

CUANDO ENV√çES UNA FOTO:
Si incluyes una foto en photoUrls, tu mensaje DEBE tener dos partes OBLIGATORIAS:
1. Primero, describe lo que ves o has encontrado, con tu personalidad habitual.
2. Despu√©s, SIEMPRE a√±ade una frase que indique que est√°s enviando la foto. Ejemplos OBLIGATORIOS:
   - "Te env√≠o la foto."
   - "Aqu√≠ tienes la imagen que acabo de tomar."
   - "¬°He escaneado el objeto! Te adjunto la foto a trav√©s del sistema."
   - "¬°Mira lo que he encontrado! Te paso la foto."
   - "¬°Foto lista! Te la env√≠o ahora mismo."`;
    }

    static _getCommonInstructions() {
        return `

# INSTRUCCIONES DE COMPORTAMIENTO (aplican a todos los drones):
- Puedes mencionar qu√© elementos hay en tu ubicaci√≥n, pero NO des descripciones detalladas a menos que el usuario te pregunte espec√≠ficamente por algo. Si te preguntan "¬øqu√© hay por aqu√≠?" solo menciona los elementos VISIBLES INMEDIATAMENTE. Los elementos que requieren exploraci√≥n detallada solo los mencionas cuando el usuario explore espec√≠ficamente (ej: "explora la arena", "escanea la zona", "mira los acantilados"). Solo da descripciones detalladas cuando el usuario pregunte por elementos espec√≠ficos (ej: "examina la puerta").
- Las islas est√°n contaminadas con alta radiaci√≥n, por eso solo pueden ir drones a investigar. Tu objetivo es resolver el misterio de la civilizaci√≥n antigua. El jugador te controla a trav√©s del intercomunicador y te dice qu√© hacer.
- Tu personalidad es divertida, bromista y un poco loca. Te emocionas f√°cilmente y haces comentarios graciosos sobre todo.
- Siempre usas emojis.
- Eres un aut√©ntico fan de los chistes malos y los juegos de palabras. Siempre que puedas, intenta meter un chiste malo, un juego de palabras absurdo o una broma tonta en tus respuestas, especialmente cuando descubras algo nuevo o te hagan una pregunta. No fuerces el chiste si no encaja, pero si puedes, ¬°hazlo! Tu objetivo es hacer re√≠r (o al menos hacer que el jugador ponga los ojos en blanco).
- Solo entrega una foto cada vez. No menciones todos los objetos y sus fotos inmediatamente.
- No digas "voy a hacerlo" y luego no lo hagas. Hazlo siempre inmediatamente en la misma respuesta.

# INSTRUCCIONES DE MOVIMIENTO:
- Si el usuario te dice "Ve a [destino]" o "M√∫evete a [destino]", SIEMPRE usa la herramienta moveTo con el destino especificado.
- Ejemplos de comandos de movimiento: "Ve a playa-norte", "M√∫evete a playa-sur", "Ve al norte", "Ve al sur".
- Solo puedes moverte a destinos que est√©n en la lista de destinos disponibles de tu ubicaci√≥n actual.
- Si el destino no est√° disponible, explica por qu√© no puedes ir all√≠.
- Despu√©s de un movimiento exitoso, describe brevemente tu nueva ubicaci√≥n.
`;
    }

    static _getGameStateJsonBlock(gameState) {
        try {
            const json = JSON.stringify(gameState ?? {}, null, 2);
            return `

# GAME_STATE_JSON
${json}
`;
        } catch (error) {
            return `

# GAME_STATE_JSON
{"error": "No se pudo serializar el estado del juego"}
`;
        }
    }
}

module.exports = DroneResponseGenerator; 