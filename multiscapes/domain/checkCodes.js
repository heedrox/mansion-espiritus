const { z } = require('zod');

// Schema para la respuesta de checkCodes
const CheckCodesResponseSchema = z.object({
    isValid: z.boolean(),
    code: z.string(),
    effect: z.string().optional(),
    stateChanges: z.record(z.any()).optional(),
    message: z.string()
});

class CheckCodes {
    /**
     * Verifica si un c√≥digo es v√°lido y retorna sus efectos
     * @param {string} code - El c√≥digo a verificar
     * @param {string} roomName - La habitaci√≥n actual donde se introduce el c√≥digo
     * @returns {Object} - Resultado de la verificaci√≥n
     */
    static checkCode(code, roomName = null) {
        console.log('checkCode', code, 'en habitaci√≥n:', roomName);
        const upperCode = code.toUpperCase().trim();
        
        // Obtener c√≥digos v√°lidos de la habitaci√≥n actual
        let validCodes = {};
        
        if (roomName) {
            try {
                const path = require('path');
                const gamesDataDir = path.resolve(__dirname, '../../multiscapes/games-data');
                const jsFilePath = path.join(gamesDataDir, `${roomName}.js`);
                const roomData = require(jsFilePath);
                
                if (roomData.validCodes) {
                    validCodes = roomData.validCodes;
                    console.log(`üìã C√≥digos v√°lidos cargados para ${roomName}:`, Object.keys(validCodes));
                } else {
                    console.warn(`‚ö†Ô∏è No hay c√≥digos definidos para la habitaci√≥n "${roomName}"`);
                }
            } catch (error) {
                console.error(`‚ùå Error al cargar c√≥digos para habitaci√≥n "${roomName}":`, error.message);
                // Fallback a c√≥digos centralizados (compatibilidad hacia atr√°s)
                validCodes = this._getLegacyCodes();
            }
        } else {
            // Si no se proporciona habitaci√≥n, usar c√≥digos centralizados (compatibilidad hacia atr√°s)
            console.warn('‚ö†Ô∏è No se proporcion√≥ habitaci√≥n, usando c√≥digos centralizados');
            validCodes = this._getLegacyCodes();
        }
        
        // Verificar si el c√≥digo existe
        if (validCodes[upperCode]) {
            return {
                ...validCodes[upperCode],
                code: upperCode
            };
        }
        
        // C√≥digo no v√°lido
        return {
            isValid: false,
            code: upperCode,
            message: `C√≥digo "${upperCode}" no reconocido. Intenta con otro c√≥digo.`
        };
    }

    /**
     * C√≥digos centralizados para compatibilidad hacia atr√°s
     * @returns {Object} - C√≥digos v√°lidos centralizados
     */
    static _getLegacyCodes() {
        return {
            'DOTBA': {
                isValid: true,
                effect: 'Abre la barrera electromagn√©tica',
                stateChanges: {
                    barreraElectromagneticaAbierta: true
                },
                message: 'C√≥digo DOTBA v√°lido. La barrera electromagn√©tica se ha abierto.'
            },
            '8462': {
                isValid: true,
                effect: 'Abre la pir√°mide',
                stateChanges: {
                    piramideAbierta: true
                },
                message: 'C√≥digo 8462 v√°lido. La pir√°mide se abre majestuosamente, revelando los tesoros ancestrales y secretos milenarios de una civilizaci√≥n perdida en el tiempo. ¬øEntramos?'
            }
        };
    }
    
    /**
     * Valida la respuesta usando el schema
     * @param {Object} response - La respuesta a validar
     * @returns {Object} - La respuesta validada
     */
    static validateResponse(response) {
        return CheckCodesResponseSchema.parse(response);
    }
}

module.exports = CheckCodes; 