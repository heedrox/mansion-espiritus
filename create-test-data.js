const DatabaseConfig = require('./multiscapes/infrastructure/DatabaseConfig');

// Configurar para usar emulador local
process.env.FIRESTORE_EMULATOR_HOST = 'localhost:8080';

// Obtener la instancia de Firestore usando la configuraci√≥n centralizada
const db = DatabaseConfig.getDb();

async function createTestData() {
    try {
        console.log('üöÄ Iniciando creaci√≥n de datos de prueba...');

        // Crear el documento 'codex' en la colecci√≥n twin-islands
        const collectionName = DatabaseConfig.getCollectionName();
        const docPath = DatabaseConfig.getDocumentPath('codex');
        
        // Crear documento 'codex'
        const codexRef = db.doc(docPath);
        await codexRef.set({
            start: "1",
            created: new Date().toISOString()
        });
        console.log('‚úÖ Documento "codex" creado');

        // Crear algunos mensajes de prueba en la subcolecci√≥n messages
        const messagesRef = codexRef.collection('messages');
        
        const testMessages = [
            {
                message: "Hola, este es el primer mensaje de prueba",
                user: "player",
                timestamp: new Date(Date.now() - 300000).toISOString() // 5 minutos atr√°s
            },
            {
                message: "¬°Hola! Soy Johnson, tu dron de investigaci√≥n. ¬°Me alegra verte por aqu√≠! ¬øQu√© tal va todo?",
                user: "drone",
                timestamp: new Date(Date.now() - 280000).toISOString() // 4.7 minutos atr√°s
            },
            {
                message: "Segundo mensaje de prueba",
                user: "player", 
                timestamp: new Date(Date.now() - 200000).toISOString() // 3 minutos atr√°s
            },
            {
                message: "¬°Oh, otro mensaje! Estoy aqu√≠ para ayudarte a resolver el misterio de las Islas Gemelas. ¬°Es emocionante!",
                user: "drone",
                timestamp: new Date(Date.now() - 180000).toISOString() // 3 minutos atr√°s
            },
            {
                message: "Tercer mensaje de prueba",
                user: "player",
                timestamp: new Date(Date.now() - 100000).toISOString() // 1 minuto atr√°s
            }
        ];

        for (const msg of testMessages) {
            await messagesRef.add(msg);
        }
        console.log('‚úÖ 5 mensajes de prueba creados (3 player + 2 drone)');

        console.log('üéâ Datos de prueba creados exitosamente!');
        console.log('\nüìä Estructura creada:');
        console.log('twin-islands/');
        console.log('‚îî‚îÄ‚îÄ codex/');
        console.log('    ‚îú‚îÄ‚îÄ start: "1"');
        console.log('    ‚îî‚îÄ‚îÄ messages/ (5 mensajes: 3 player + 2 drone)');

    } catch (error) {
        console.error('‚ùå Error al crear datos de prueba:', error);
        throw error;
    }
}

// Ejecutar la funci√≥n
createTestData()
    .then(() => {
        console.log('\n‚úÖ Script completado exitosamente');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå Script fall√≥:', error);
        process.exit(1);
    }); 