const DatabaseConfig = require('./multiscapes/infrastructure/DatabaseConfig');
const CheckCodes = require('./multiscapes/domain/checkCodes');
const GameStateService = require('./multiscapes/infrastructure/GameStateService');

// Configurar para usar emulador local
process.env.FIRESTORE_EMULATOR_HOST = 'localhost:8080';

// Obtener la instancia de Firestore usando la configuraci√≥n centralizada
const db = DatabaseConfig.getDb();

async function getFirebaseDocumentState() {
    try {
        console.log('\nüìä Estado actual del documento Firebase:');
        
        const docPath = DatabaseConfig.getDocumentPath('codex');
        const docRef = db.doc(docPath);
        const docSnapshot = await docRef.get();
        
        if (docSnapshot.exists) {
            const data = docSnapshot.data();
            console.log('üìÑ Documento codex:', JSON.stringify(data, null, 2));
            console.log(`üîí Estado de la barrera: ${data.barreraElectromagneticaAbierta ? 'ABIERTA' : 'CERRADA'}`);
            return data;
        } else {
            console.log('‚ùå El documento codex no existe');
            return null;
        }
    } catch (error) {
        console.error('‚ùå Error al obtener estado del documento:', error);
        return null;
    }
}

async function testCheckCodesDirectly() {
    console.log('\nüß™ TESTING CheckCodes DIRECTAMENTE...');
    console.log('=' .repeat(60));
    
    // Test 1: C√≥digo v√°lido DOTBA
    console.log('\nüìù Test 1: C√≥digo v√°lido "DOTBA"');
    const result1 = CheckCodes.checkCode('DOTBA');
    console.log('‚úÖ Resultado:', JSON.stringify(result1, null, 2));
    
    // Test 2: C√≥digo inv√°lido
    console.log('\nüìù Test 2: C√≥digo inv√°lido "ABCD"');
    const result2 = CheckCodes.checkCode('ABCD');
    console.log('‚úÖ Resultado:', JSON.stringify(result2, null, 2));
    
    // Test 3: C√≥digo v√°lido en min√∫sculas
    console.log('\nüìù Test 3: C√≥digo v√°lido en min√∫sculas "dotba"');
    const result3 = CheckCodes.checkCode('dotba');
    console.log('‚úÖ Resultado:', JSON.stringify(result3, null, 2));
    
    return { result1, result2, result3 };
}

async function testGameStateService() {
    console.log('\nüéÆ TESTING GameStateService...');
    console.log('=' .repeat(60));
    
    const gameStateService = new GameStateService();
    
    // Test obtener estado actual
    console.log('\nüìù Test: Obtener estado actual');
    const currentState = await gameStateService.getGameState();
    console.log('‚úÖ Estado actual:', JSON.stringify(currentState, null, 2));
    
    // Test abrir barrera
    console.log('\nüìù Test: Abrir barrera electromagn√©tica');
    await gameStateService.openBarrier();
    console.log('‚úÖ Barrera abierta');
    
    // Verificar estado despu√©s de abrir barrera
    console.log('\nüìù Test: Verificar estado despu√©s de abrir barrera');
    const newState = await gameStateService.getGameState();
    console.log('‚úÖ Nuevo estado:', JSON.stringify(newState, null, 2));
    
    return { currentState, newState };
}

async function simulateCheckCodesExecution() {
    console.log('\n‚öôÔ∏è  SIMULANDO EJECUCI√ìN DE checkCodes TOOL...');
    console.log('=' .repeat(60));
    
    // Simular el proceso que ocurre en DroneResponseGenerator
    const code = 'DOTBA';
    const reason = 'El usuario mencion√≥ el c√≥digo DOTBA';
    
    console.log(`üîç Ejecutando checkCodes con c√≥digo: ${code}`);
    console.log(`üìù Raz√≥n: ${reason}`);
    
    // Ejecutar checkCode
    const result = CheckCodes.checkCode(code);
    console.log(`üìã Resultado: ${result.isValid ? 'V√°lido' : 'Inv√°lido'} - ${result.message}`);
    console.log(`üìä StateChanges:`, result.stateChanges);
    
    // Aplicar cambios de estado si el c√≥digo es v√°lido
    if (result.isValid && result.stateChanges) {
        console.log(`üîÑ Aplicando cambios de estado...`);
        const gameStateService = new GameStateService();
        
        for (const [key, value] of Object.entries(result.stateChanges)) {
            console.log(`üîß Aplicando ${key} = ${value}`);
            if (key === 'barreraElectromagneticaAbierta' && value === true) {
                await gameStateService.openBarrier();
                console.log('üîì Barrera electromagn√©tica abierta desde simulaci√≥n de checkCodes');
            }
        }
    }
    
    return result;
}

async function resetBarrierState() {
    console.log('\nüîÑ RESETEANDO estado de la barrera...');
    
    try {
        const docPath = DatabaseConfig.getDocumentPath('codex');
        const codexRef = db.doc(docPath);
        await codexRef.update({
            barreraElectromagneticaAbierta: false,
            updatedAt: new Date().toISOString()
        });
        console.log('‚úÖ Barrera cerrada (estado reseteado)');
    } catch (error) {
        console.error('‚ùå Error al resetear estado:', error);
    }
}

async function main() {
    try {
        console.log('üîç INICIANDO DEBUG DE CHECKCODES');
        console.log('=' .repeat(80));
        
        // Estado inicial
        console.log('\nüìä ESTADO INICIAL:');
        await getFirebaseDocumentState();
        
        // Test CheckCodes directamente
        await testCheckCodesDirectly();
        
        // Test GameStateService
        await resetBarrierState(); // Reset para test limpio
        await testGameStateService();
        
        // Reset para la simulaci√≥n
        await resetBarrierState();
        console.log('\nüìä ESTADO ANTES DE SIMULACI√ìN:');
        await getFirebaseDocumentState();
        
        // Simular la ejecuci√≥n completa
        await simulateCheckCodesExecution();
        
        // Estado final
        console.log('\nüìä ESTADO FINAL:');
        await getFirebaseDocumentState();
        
        console.log('\nüéâ DEBUG COMPLETO FINALIZADO');
        console.log('üîç Revisa las trazas arriba para verificar:');
        console.log('   - checkCodes procesa c√≥digos correctamente');
        console.log('   - GameStateService actualiza el estado');
        console.log('   - El documento Firebase refleja los cambios');
        
    } catch (error) {
        console.error('\nüí• ERROR CR√çTICO:', error);
        console.error('Stack trace:', error.stack);
    }
}

// Ejecutar el script
if (require.main === module) {
    main()
        .then(() => {
            console.log('\n‚úÖ Debug completado');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå Debug fall√≥:', error);
            process.exit(1);
        });
}

module.exports = {
    testCheckCodesDirectly,
    testGameStateService,
    simulateCheckCodesExecution,
    getFirebaseDocumentState,
    resetBarrierState
};